# -*- coding: utf-8 -*-
"""titanic ml project .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uwNolZQIEOMZqGa7VAoMjsDpvZhapMF_
"""

import pandas as pd
data = pd.read_csv("titanic.csv")
test = pd.read_csv("titanic.csv")
data.tail()

def clean(data):
  data = data.drop(["Ticket", "Cabin", "Name", "PassengerId", "survived and not survived"], axis=1)
  cols = ["SibSp", "Parch", "Fare", "Age"]
  for col in cols:
    data[col] = data[col].fillna(data[col].median())
    data['Embarked'] = data['Embarked'].fillna("U")
  return data


data = clean(data)
data.head(5)

from sklearn.preprocessing import OneHotEncoder
categorical_columns = ['Embarked', 'Sex',]
ohe = OneHotEncoder(sparse_output=False)
encoded_data = ohe.fit_transform(data[categorical_columns])
encoded_df = pd.DataFrame(encoded_data, columns=ohe.get_feature_names_out(categorical_columns))
df_sklearn_encoded = pd.concat([data.drop(categorical_columns, axis=1), encoded_df], axis=1)
df_sklearn_encoded.head()

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

x = df_sklearn_encoded.drop("Survived", axis=1)
y = df_sklearn_encoded["Survived"]

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2,random_state=12)

clf = LogisticRegression(random_state=0, max_iter=1000).fit(x_train, y_train)

predictions = clf.predict(x_test)
accuracy_score(y_test, predictions)

from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(max_depth=2, random_state=0)
clf.fit(x_train, y_train)
df_sklearn_encoded.head()

predictions = clf.predict(x_test)
accuracy_score(y_test, predictions)

from sklearn.svm import SVC
clf = SVC(gamma='auto')
clf.fit(x_train, y_train)
df_sklearn_encoded.head()

predictions = clf.predict(x_test)
accuracy_score(y_test, predictions)

from sklearn.naive_bayes import GaussianNB
clf = GaussianNB()
clf.fit(x_train, y_train)
df_sklearn_encoded.head()

predictions = clf.predict(x_test)
accuracy_score(y_test, predictions)

from sklearn.neighbors import KNeighborsClassifier
clf = KNeighborsClassifier(n_neighbors=3)
clf.fit(x_train, y_train)
df_sklearn_encoded.head()

predictions = clf.predict(x_test)
accuracy_score(y_test, predictions)

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(random_state=0)
clf.fit(x_train, y_train)
df_sklearn_encoded.head()
df_sklearn_encoded.head()

predictions = clf.predict(x_test)
accuracy_score(y_test, predictions)

from sklearn.ensemble import GradientBoostingClassifier
clf = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0, max_depth=1, random_state=0)
clf.fit(x_train, y_train)
df_sklearn_encoded.head()

predictions = clf.predict(x_test)
accuracy_score(y_test, predictions)